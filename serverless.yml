org: photonadmin # Corresponds to the serverless.com account used for monitoring
app: photonranch

service: photonranch-api

package:
  exclude:
    - venv/**
    - node_modules/**

plugins:
  - serverless-python-requirements
  #- serverless-dynamodb-pitr
  - serverless-domain-manager

custom:

  # This is the 'variable' for the customDomain.basePath value, based on the stage.
  # Run as `sls deploy --stage <stage_name>`
  stage:
    dev: api
    test: test

  # Make sure to first run 'serverless create_domain'
  customDomain:
    domainName: 'api.photonranch.org'
    basePath: ${self:custom.stage.${self:provider.stage}}
    stage: ${self:provider.stage}
    createRoute53Record: true

provider:
  name: aws
  stage: ${opt:stage, "dev"}
  runtime: python3.7
  region: us-east-1
  environment: 
    AUTH0_CLIENT_ID: ${file(./secrets.json):AUTH0_CLIENT_ID}
    AUTH0_CLIENT_PUBLIC_KEY: ${file(./public_key)}

  iamRoleStatements:
    - Effect: Allow 
      Action: 
        - s3:GetObject
        - s3:PutObject
        - s3:ListBucket
        - s3:ListBucketVersions
      Resource: 
        - "arn:aws:s3:::photonranch-001/*"
        - "arn:aws:s3:::photonranch-001"

    - Effect: Allow
      Action:
        - ssm:GetParameter
      Resource: "arn:aws:ssm:${self:provider.region}:*:parameter/*"

    - Effect: Allow 
      Action: 
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Scan"
        - "dynamodb:Query"
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:*"

    - Effect: Allow
      Action:
        - sqs:*
      Resource: arn:aws:sqs:*:*:*

resources: # CloudFormation template syntax from here on.
  Resources:

    # Configure API gateway "Gateway Responses" to work with CORS restrictions
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Access-Control-Allow-Origin'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Access-Control-Allow-Origin'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

functions:
  authorizerFunc: 
    handler: authorizer.auth
    cors: true
  ping:
    handler: handler.ping
    events:
      - http:
          path: ping/{pathParam}
          method: post
          authorizer:
            name: authorizerFunc
            type: request
            resultTtlInSeconds: 0 # Don't cache the policy or other tasks will fail!
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
  home:
    handler: handler.default
    events:
      - http:
          path: /
          method: get
  upload:
    handler: handler.upload
    events:
      - http:
          path: /{site}/upload
          method: post
  download:
    handler: handler.download
    events:
      - http:
          path: /{site}/download
          method: post
          cors: true

  latestImage:
    handler: handler.latest_image
    events:
      - http:
          path: /{site}/latest_image
          method: get
          cors: true
  latestKImages:
    handler: handler.latest_images
    events:
      - http:
          path: /{site}/latest_images/{k}
          method: get
          cors: true

  getConfig:
    handler: handler.get_config
    events:
      - http:
          path: /{site}/config
          method: get
          cors: true
  putConfig:
    handler: handler.put_config
    events:
      - http:
          path: /{site}/config
          method: put
          cors: true
  allConfig:
    handler: handler.all_config
    events:
      - http:
          path: /all/config
          method: get
          cors: true
  getFitsHeader:
    handler: handler.get_fits_header
    events:
      - http:
          path: fitsheader/{baseFilename}
          method: get
          cors: true

  getFits01:
    handler: handler.get_fits_01
    events:
      - http:
          path: fits01_url/{baseFilename}
          method: get
          cors: true
  getFits13:
    handler: handler.get_fits_13
    events:
      - http:
          path: fits13_url/{baseFilename}
          method: get
          cors: true

  filteredImageQuery:
    handler: handler.filtered_image_query
    events:
      - http:
          path: filtered_images
          method: get
          cors: true

  getImagesByUser:
    handler: handler.image_by_user
    memorySize: 3008
    timeout: 20
    events:
      - http:
          path: /image_by_user/{user_id}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials

  getCommand:
    handler: handler.get_command
    events:
      - http:
          path: /{site}/{mount}/command
          method: get
          cors: true
  postCommand:
    handler: handler.post_command
    events:
      - http:
          path: /{site}/{mount}/command
          method: post
          cors: true
  optionsCommand: # This is to fix CORS issues
    handler: handler.options_command
    events:
      - http:
          path: /{site}/{mount}/command
          method: options
          cors: true

  getStatus:
    handler: handler.get_status
    events:
      - http:
          path: /{site}/status
          method: get
          cors: true
  putStatus: # This is to fix CORS issues
    handler: handler.put_status
    events:
      - http:
          path: /{site}/status
          method: put
          cors: true
